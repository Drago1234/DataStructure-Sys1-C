/*Author: Zhengqi Dong*/
/*Date: Feb 21 2019*/

/*Insert an node */
void insertNode(struct Node **headPtrPtr, Node *newNode)
{
    struct Node *currentPtr;
    struct Node *previousPtr;

    /*Initializing the pointer*/
    currentPtr = *headPtrPtr;
    if(*headPtrPtr == NULL)
    {
        /*The case where the list is empty*/
        *headPtrPtr = newNode;
        newNode->next = NULL;
    }
    else if((*headPtrPtr)->Student.student_ID > newNode->Student.student_ID)
    {
        newNode->next = *headPtrPtr;
        *headPtrPtr = newNode;
    }
    else
    {
        while( (currentPtr != NULL) &&  (currentPtr->Student.student_ID < newNode->Student.student_ID))
        {
            previousPtr = currentPtr;
            currentPtr = currentPtr -> next;
        } /*Maintain the iteration of currentPtr or trailing pointer*/
        if(currentPtr == NULL) /*The case where we reached the end of file*/
        {
            previousPtr->next = newNode;
            newNode->next = NULL;
        }
        else
        {
            /*Where we insert the node*/
            previousPtr->next = newNode;
            newNode->next = currentPtr;
        }
    }
    return;
}


/*if we find a matched id we delete it from list and return TRUE, if doesn't exist we return FALSE, return something for debugging*/
void deleteNode(struct Node **headNode, int id)
{
    struct Node *currentPtr;

    currentPtr = *headNode;
    /*First, if the list is empty*/
    if(*headNode == NULL)
    {
        return;
    }
    else if(*headNode->Student.student_ID == id)
    {
        /*First node is the node we need to delete*/
        *headNode = *currentPtr->next;
        free(currentPtr);
    }
    else
    {
        struct Node *previousPtr;
        /*Maintaining the iteration of currentPtr*/
        while( (currentPtr != NULL) &&  (currentPtr->Student.student_ID != id))
        {
            previousPtr = currentPtr;
            currentPtr = currentPtr ->next;
        }

        if(currentPtr==NULL)
        {
            /*Where the List is empty or id doesn't exist*/
            printf("Error, the ID doesn't in the list!\n");
            return;
        }
        else if(currentPtr->Student.student_ID == id)
        {
            /*Where the case the id had been found*/
            previousPtr->next = currentPtr->next;
            free(currentPtr);
        }
    }
    return;
}
